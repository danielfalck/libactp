# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _FreesteelPython
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _FreesteelPython.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _FreesteelPython.PySwigIterator_value(*args)
    def incr(*args): return _FreesteelPython.PySwigIterator_incr(*args)
    def decr(*args): return _FreesteelPython.PySwigIterator_decr(*args)
    def distance(*args): return _FreesteelPython.PySwigIterator_distance(*args)
    def equal(*args): return _FreesteelPython.PySwigIterator_equal(*args)
    def copy(*args): return _FreesteelPython.PySwigIterator_copy(*args)
    def next(*args): return _FreesteelPython.PySwigIterator_next(*args)
    def previous(*args): return _FreesteelPython.PySwigIterator_previous(*args)
    def advance(*args): return _FreesteelPython.PySwigIterator_advance(*args)
    def __eq__(*args): return _FreesteelPython.PySwigIterator___eq__(*args)
    def __ne__(*args): return _FreesteelPython.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _FreesteelPython.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _FreesteelPython.PySwigIterator___isub__(*args)
    def __add__(*args): return _FreesteelPython.PySwigIterator___add__(*args)
    def __sub__(*args): return _FreesteelPython.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _FreesteelPython.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class I1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, I1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, I1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lo"] = _FreesteelPython.I1_lo_set
    __swig_getmethods__["lo"] = _FreesteelPython.I1_lo_get
    if _newclass:lo = _swig_property(_FreesteelPython.I1_lo_get, _FreesteelPython.I1_lo_set)
    __swig_setmethods__["hi"] = _FreesteelPython.I1_hi_set
    __swig_getmethods__["hi"] = _FreesteelPython.I1_hi_get
    if _newclass:hi = _swig_property(_FreesteelPython.I1_hi_get, _FreesteelPython.I1_hi_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_I1(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetRan(*args): return _FreesteelPython.I1_SetRan(*args)
    def SetLo(*args): return _FreesteelPython.I1_SetLo(*args)
    def SetHi(*args): return _FreesteelPython.I1_SetHi(*args)
    def Absorb(*args): return _FreesteelPython.I1_Absorb(*args)
    def Combine(*args): return _FreesteelPython.I1_Combine(*args)
    __swig_getmethods__["SCombine"] = lambda x: _FreesteelPython.I1_SCombine
    if _newclass:SCombine = staticmethod(_FreesteelPython.I1_SCombine)
    def Inflate(*args): return _FreesteelPython.I1_Inflate(*args)
    def Intersect(*args): return _FreesteelPython.I1_Intersect(*args)
    def ContainsWithin(*args): return _FreesteelPython.I1_ContainsWithin(*args)
    def Contains(*args): return _FreesteelPython.I1_Contains(*args)
    def Leng(*args): return _FreesteelPython.I1_Leng(*args)
    def Along(*args): return _FreesteelPython.I1_Along(*args)
    def Half(*args): return _FreesteelPython.I1_Half(*args)
    def InvAlong(*args): return _FreesteelPython.I1_InvAlong(*args)
    def Distance(*args): return _FreesteelPython.I1_Distance(*args)
    def PushInto(*args): return _FreesteelPython.I1_PushInto(*args)
    def PushIntoSmall(*args): return _FreesteelPython.I1_PushIntoSmall(*args)
    def __add__(*args): return _FreesteelPython.I1___add__(*args)
    def __sub__(*args): return _FreesteelPython.I1___sub__(*args)
    def __mul__(*args): return _FreesteelPython.I1___mul__(*args)
    def __div__(*args): return _FreesteelPython.I1___div__(*args)
    def __eq__(*args): return _FreesteelPython.I1___eq__(*args)
    __swig_destroy__ = _FreesteelPython.delete_I1
    __del__ = lambda self : None;
I1_swigregister = _FreesteelPython.I1_swigregister
I1_swigregister(I1)
I1_SCombine = _FreesteelPython.I1_SCombine

MPI = _FreesteelPython.MPI
M2PI = _FreesteelPython.M2PI
class P2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, P2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, P2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u"] = _FreesteelPython.P2_u_set
    __swig_getmethods__["u"] = _FreesteelPython.P2_u_get
    if _newclass:u = _swig_property(_FreesteelPython.P2_u_get, _FreesteelPython.P2_u_set)
    __swig_setmethods__["v"] = _FreesteelPython.P2_v_set
    __swig_getmethods__["v"] = _FreesteelPython.P2_v_get
    if _newclass:v = _swig_property(_FreesteelPython.P2_v_get, _FreesteelPython.P2_v_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_P2(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetVal(*args): return _FreesteelPython.P2_SetVal(*args)
    def __sub__(*args): return _FreesteelPython.P2___sub__(*args)
    def __add__(*args): return _FreesteelPython.P2___add__(*args)
    def __mul__(*args): return _FreesteelPython.P2___mul__(*args)
    def __div__(*args): return _FreesteelPython.P2___div__(*args)
    def __iadd__(*args): return _FreesteelPython.P2___iadd__(*args)
    def Lensq(*args): return _FreesteelPython.P2_Lensq(*args)
    def Len(*args): return _FreesteelPython.P2_Len(*args)
    def DArg(*args): return _FreesteelPython.P2_DArg(*args)
    def Arg(*args): return _FreesteelPython.P2_Arg(*args)
    __swig_getmethods__["InvDarg"] = lambda x: _FreesteelPython.P2_InvDarg
    if _newclass:InvDarg = staticmethod(_FreesteelPython.P2_InvDarg)
    def __eq__(*args): return _FreesteelPython.P2___eq__(*args)
    def __ne__(*args): return _FreesteelPython.P2___ne__(*args)
    __swig_destroy__ = _FreesteelPython.delete_P2
    __del__ = lambda self : None;
P2_swigregister = _FreesteelPython.P2_swigregister
P2_swigregister(P2)
P2_InvDarg = _FreesteelPython.P2_InvDarg

CPerp = _FreesteelPython.CPerp
APerp = _FreesteelPython.APerp
class P3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, P3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, P3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _FreesteelPython.P3_x_set
    __swig_getmethods__["x"] = _FreesteelPython.P3_x_get
    if _newclass:x = _swig_property(_FreesteelPython.P3_x_get, _FreesteelPython.P3_x_set)
    __swig_setmethods__["y"] = _FreesteelPython.P3_y_set
    __swig_getmethods__["y"] = _FreesteelPython.P3_y_get
    if _newclass:y = _swig_property(_FreesteelPython.P3_y_get, _FreesteelPython.P3_y_set)
    __swig_setmethods__["z"] = _FreesteelPython.P3_z_set
    __swig_getmethods__["z"] = _FreesteelPython.P3_z_get
    if _newclass:z = _swig_property(_FreesteelPython.P3_z_get, _FreesteelPython.P3_z_set)
    def __eq__(*args): return _FreesteelPython.P3___eq__(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_P3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __sub__(*args): return _FreesteelPython.P3___sub__(*args)
    def __add__(*args): return _FreesteelPython.P3___add__(*args)
    def __neg__(*args): return _FreesteelPython.P3___neg__(*args)
    def __mul__(*args): return _FreesteelPython.P3___mul__(*args)
    def __div__(*args): return _FreesteelPython.P3___div__(*args)
    def Lensq(*args): return _FreesteelPython.P3_Lensq(*args)
    def Len(*args): return _FreesteelPython.P3_Len(*args)
    __swig_getmethods__["CrossProd"] = lambda x: _FreesteelPython.P3_CrossProd
    if _newclass:CrossProd = staticmethod(_FreesteelPython.P3_CrossProd)
    __swig_destroy__ = _FreesteelPython.delete_P3
    __del__ = lambda self : None;
P3_swigregister = _FreesteelPython.P3_swigregister
P3_swigregister(P3)
P3_CrossProd = _FreesteelPython.P3_CrossProd

ConvertGZ = _FreesteelPython.ConvertGZ
ConvertCZ = _FreesteelPython.ConvertCZ
ConvertLZ = _FreesteelPython.ConvertLZ
Square = _FreesteelPython.Square
DotLZ = _FreesteelPython.DotLZ
PosSqrt = _FreesteelPython.PosSqrt
Distsq = _FreesteelPython.Distsq
EqualP2 = _FreesteelPython.EqualP2
EqualP3 = _FreesteelPython.EqualP3
class vecb1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vecb1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vecb1, name)
    __repr__ = _swig_repr
    def iterator(*args): return _FreesteelPython.vecb1_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _FreesteelPython.vecb1___nonzero__(*args)
    def __len__(*args): return _FreesteelPython.vecb1___len__(*args)
    def pop(*args): return _FreesteelPython.vecb1_pop(*args)
    def __getslice__(*args): return _FreesteelPython.vecb1___getslice__(*args)
    def __setslice__(*args): return _FreesteelPython.vecb1___setslice__(*args)
    def __delslice__(*args): return _FreesteelPython.vecb1___delslice__(*args)
    def __delitem__(*args): return _FreesteelPython.vecb1___delitem__(*args)
    def __getitem__(*args): return _FreesteelPython.vecb1___getitem__(*args)
    def __setitem__(*args): return _FreesteelPython.vecb1___setitem__(*args)
    def append(*args): return _FreesteelPython.vecb1_append(*args)
    def empty(*args): return _FreesteelPython.vecb1_empty(*args)
    def size(*args): return _FreesteelPython.vecb1_size(*args)
    def clear(*args): return _FreesteelPython.vecb1_clear(*args)
    def swap(*args): return _FreesteelPython.vecb1_swap(*args)
    def get_allocator(*args): return _FreesteelPython.vecb1_get_allocator(*args)
    def begin(*args): return _FreesteelPython.vecb1_begin(*args)
    def end(*args): return _FreesteelPython.vecb1_end(*args)
    def rbegin(*args): return _FreesteelPython.vecb1_rbegin(*args)
    def rend(*args): return _FreesteelPython.vecb1_rend(*args)
    def pop_back(*args): return _FreesteelPython.vecb1_pop_back(*args)
    def erase(*args): return _FreesteelPython.vecb1_erase(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_vecb1(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _FreesteelPython.vecb1_push_back(*args)
    def front(*args): return _FreesteelPython.vecb1_front(*args)
    def back(*args): return _FreesteelPython.vecb1_back(*args)
    def assign(*args): return _FreesteelPython.vecb1_assign(*args)
    def resize(*args): return _FreesteelPython.vecb1_resize(*args)
    def insert(*args): return _FreesteelPython.vecb1_insert(*args)
    def reserve(*args): return _FreesteelPython.vecb1_reserve(*args)
    def capacity(*args): return _FreesteelPython.vecb1_capacity(*args)
    __swig_destroy__ = _FreesteelPython.delete_vecb1
    __del__ = lambda self : None;
vecb1_swigregister = _FreesteelPython.vecb1_swigregister
vecb1_swigregister(vecb1)
Half = _FreesteelPython.Half
Along = _FreesteelPython.Along
InvAlong = _FreesteelPython.InvAlong
Dot = _FreesteelPython.Dot

class B1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, B1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, B1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _FreesteelPython.B1_w_set
    __swig_getmethods__["w"] = _FreesteelPython.B1_w_get
    if _newclass:w = _swig_property(_FreesteelPython.B1_w_get, _FreesteelPython.B1_w_set)
    __swig_setmethods__["blower"] = _FreesteelPython.B1_blower_set
    __swig_getmethods__["blower"] = _FreesteelPython.B1_blower_get
    if _newclass:blower = _swig_property(_FreesteelPython.B1_blower_get, _FreesteelPython.B1_blower_set)
    __swig_setmethods__["binterncellbound"] = _FreesteelPython.B1_binterncellbound_set
    __swig_getmethods__["binterncellbound"] = _FreesteelPython.B1_binterncellbound_get
    if _newclass:binterncellbound = _swig_property(_FreesteelPython.B1_binterncellbound_get, _FreesteelPython.B1_binterncellbound_set)
    __swig_setmethods__["contournumber"] = _FreesteelPython.B1_contournumber_set
    __swig_getmethods__["contournumber"] = _FreesteelPython.B1_contournumber_get
    if _newclass:contournumber = _swig_property(_FreesteelPython.B1_contournumber_get, _FreesteelPython.B1_contournumber_set)
    __swig_setmethods__["cutcode"] = _FreesteelPython.B1_cutcode_set
    __swig_getmethods__["cutcode"] = _FreesteelPython.B1_cutcode_get
    if _newclass:cutcode = _swig_property(_FreesteelPython.B1_cutcode_get, _FreesteelPython.B1_cutcode_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_B1(*args)
        try: self.this.append(this)
        except: self.this = this
    def __lt__(*args): return _FreesteelPython.B1___lt__(*args)
    __swig_destroy__ = _FreesteelPython.delete_B1
    __del__ = lambda self : None;
B1_swigregister = _FreesteelPython.B1_swigregister
B1_swigregister(B1)

class S1(vecb1):
    __swig_setmethods__ = {}
    for _s in [vecb1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, S1, name, value)
    __swig_getmethods__ = {}
    for _s in [vecb1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, S1, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wp"] = _FreesteelPython.S1_wp_set
    __swig_getmethods__["wp"] = _FreesteelPython.S1_wp_get
    if _newclass:wp = _swig_property(_FreesteelPython.S1_wp_get, _FreesteelPython.S1_wp_set)
    __swig_setmethods__["wrg"] = _FreesteelPython.S1_wrg_set
    __swig_getmethods__["wrg"] = _FreesteelPython.S1_wrg_get
    if _newclass:wrg = _swig_property(_FreesteelPython.S1_wrg_get, _FreesteelPython.S1_wrg_set)
    __swig_setmethods__["ftype"] = _FreesteelPython.S1_ftype_set
    __swig_getmethods__["ftype"] = _FreesteelPython.S1_ftype_get
    if _newclass:ftype = _swig_property(_FreesteelPython.S1_ftype_get, _FreesteelPython.S1_ftype_set)
    def Merge(*args): return _FreesteelPython.S1_Merge(*args)
    def Minus(*args): return _FreesteelPython.S1_Minus(*args)
    def Loclohi(*args): return _FreesteelPython.S1_Loclohi(*args)
    def Invert(*args): return _FreesteelPython.S1_Invert(*args)
    def Check(*args): return _FreesteelPython.S1_Check(*args)
    def Contains(*args): return _FreesteelPython.S1_Contains(*args)
    def ContainsRG(*args): return _FreesteelPython.S1_ContainsRG(*args)
    def SetNew(*args): return _FreesteelPython.S1_SetNew(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_S1(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetAllCutCodes(*args): return _FreesteelPython.S1_SetAllCutCodes(*args)
    __swig_destroy__ = _FreesteelPython.delete_S1
    __del__ = lambda self : None;
S1_swigregister = _FreesteelPython.S1_swigregister
S1_swigregister(S1)

class Partition1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Partition1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Partition1, name)
    __repr__ = _swig_repr
    def NumParts(*args): return _FreesteelPython.Partition1_NumParts(*args)
    def GetPart(*args): return _FreesteelPython.Partition1_GetPart(*args)
    def FindPart(*args): return _FreesteelPython.Partition1_FindPart(*args)
    def FindPartRG(*args): return _FreesteelPython.Partition1_FindPartRG(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_Partition1(*args)
        try: self.this.append(this)
        except: self.this = this
    def Getrg(*args): return _FreesteelPython.Partition1_Getrg(*args)
    __swig_destroy__ = _FreesteelPython.delete_Partition1
    __del__ = lambda self : None;
Partition1_swigregister = _FreesteelPython.Partition1_swigregister
Partition1_swigregister(Partition1)

class GSTbase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSTbase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GSTbase, name)
    __repr__ = _swig_repr
    __swig_setmethods__["actors"] = _FreesteelPython.GSTbase_actors_set
    __swig_getmethods__["actors"] = _FreesteelPython.GSTbase_actors_get
    if _newclass:actors = _swig_property(_FreesteelPython.GSTbase_actors_get, _FreesteelPython.GSTbase_actors_set)
    __swig_setmethods__["xrg"] = _FreesteelPython.GSTbase_xrg_set
    __swig_getmethods__["xrg"] = _FreesteelPython.GSTbase_xrg_get
    if _newclass:xrg = _swig_property(_FreesteelPython.GSTbase_xrg_get, _FreesteelPython.GSTbase_xrg_set)
    __swig_setmethods__["yrg"] = _FreesteelPython.GSTbase_yrg_set
    __swig_getmethods__["yrg"] = _FreesteelPython.GSTbase_yrg_get
    if _newclass:yrg = _swig_property(_FreesteelPython.GSTbase_yrg_get, _FreesteelPython.GSTbase_yrg_set)
    __swig_setmethods__["zrg"] = _FreesteelPython.GSTbase_zrg_set
    __swig_getmethods__["zrg"] = _FreesteelPython.GSTbase_zrg_get
    if _newclass:zrg = _swig_property(_FreesteelPython.GSTbase_zrg_get, _FreesteelPython.GSTbase_zrg_set)
    def AddToRenderer(*args): return _FreesteelPython.GSTbase_AddToRenderer(*args)
    def GetVisibility(*args): return _FreesteelPython.GSTbase_GetVisibility(*args)
    def SetVisibility(*args): return _FreesteelPython.GSTbase_SetVisibility(*args)
    def MakeRectBoundary(*args): return _FreesteelPython.GSTbase_MakeRectBoundary(*args)
    __swig_destroy__ = _FreesteelPython.delete_GSTbase
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _FreesteelPython.new_GSTbase(*args)
        try: self.this.append(this)
        except: self.this = this
GSTbase_swigregister = _FreesteelPython.GSTbase_swigregister
GSTbase_swigregister(GSTbase)

class GSTsurface(GSTbase):
    __swig_setmethods__ = {}
    for _s in [GSTbase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSTsurface, name, value)
    __swig_getmethods__ = {}
    for _s in [GSTbase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GSTsurface, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stl"] = _FreesteelPython.GSTsurface_stl_set
    __swig_getmethods__["stl"] = _FreesteelPython.GSTsurface_stl_get
    if _newclass:stl = _swig_property(_FreesteelPython.GSTsurface_stl_get, _FreesteelPython.GSTsurface_stl_set)
    __swig_setmethods__["stlMap"] = _FreesteelPython.GSTsurface_stlMap_set
    __swig_getmethods__["stlMap"] = _FreesteelPython.GSTsurface_stlMap_get
    if _newclass:stlMap = _swig_property(_FreesteelPython.GSTsurface_stlMap_get, _FreesteelPython.GSTsurface_stlMap_set)
    def LoadSTL(*args): return _FreesteelPython.GSTsurface_LoadSTL(*args)
    def PushTrianglesIntoSurface(*args): return _FreesteelPython.GSTsurface_PushTrianglesIntoSurface(*args)
    __swig_destroy__ = _FreesteelPython.delete_GSTsurface
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _FreesteelPython.new_GSTsurface(*args)
        try: self.this.append(this)
        except: self.this = this
GSTsurface_swigregister = _FreesteelPython.GSTsurface_swigregister
GSTsurface_swigregister(GSTsurface)

class GSTtoolpath(GSTbase):
    __swig_setmethods__ = {}
    for _s in [GSTbase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GSTtoolpath, name, value)
    __swig_getmethods__ = {}
    for _s in [GSTbase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GSTtoolpath, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ftpaths"] = _FreesteelPython.GSTtoolpath_ftpaths_set
    __swig_getmethods__["ftpaths"] = _FreesteelPython.GSTtoolpath_ftpaths_get
    if _newclass:ftpaths = _swig_property(_FreesteelPython.GSTtoolpath_ftpaths_get, _FreesteelPython.GSTtoolpath_ftpaths_set)
    __swig_setmethods__["ftpolydata"] = _FreesteelPython.GSTtoolpath_ftpolydata_set
    __swig_getmethods__["ftpolydata"] = _FreesteelPython.GSTtoolpath_ftpolydata_get
    if _newclass:ftpolydata = _swig_property(_FreesteelPython.GSTtoolpath_ftpolydata_get, _FreesteelPython.GSTtoolpath_ftpolydata_set)
    __swig_setmethods__["ftpolydataMap"] = _FreesteelPython.GSTtoolpath_ftpolydataMap_set
    __swig_getmethods__["ftpolydataMap"] = _FreesteelPython.GSTtoolpath_ftpolydataMap_get
    if _newclass:ftpolydataMap = _swig_property(_FreesteelPython.GSTtoolpath_ftpolydataMap_get, _FreesteelPython.GSTtoolpath_ftpolydataMap_set)
    __swig_setmethods__["toolshape"] = _FreesteelPython.GSTtoolpath_toolshape_set
    __swig_getmethods__["toolshape"] = _FreesteelPython.GSTtoolpath_toolshape_get
    if _newclass:toolshape = _swig_property(_FreesteelPython.GSTtoolpath_toolshape_get, _FreesteelPython.GSTtoolpath_toolshape_set)
    __swig_setmethods__["bound"] = _FreesteelPython.GSTtoolpath_bound_set
    __swig_getmethods__["bound"] = _FreesteelPython.GSTtoolpath_bound_get
    if _newclass:bound = _swig_property(_FreesteelPython.GSTtoolpath_bound_get, _FreesteelPython.GSTtoolpath_bound_set)
    def UpdateFromPax(*args): return _FreesteelPython.GSTtoolpath_UpdateFromPax(*args)
    def SetDrawWhole(*args): return _FreesteelPython.GSTtoolpath_SetDrawWhole(*args)
    def addPath(*args): return _FreesteelPython.GSTtoolpath_addPath(*args)
    __swig_destroy__ = _FreesteelPython.delete_GSTtoolpath
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _FreesteelPython.new_GSTtoolpath(*args)
        try: self.this.append(this)
        except: self.this = this
GSTtoolpath_swigregister = _FreesteelPython.GSTtoolpath_swigregister
GSTtoolpath_swigregister(GSTtoolpath)

class vecPathXSeries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vecPathXSeries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vecPathXSeries, name)
    __repr__ = _swig_repr
    def iterator(*args): return _FreesteelPython.vecPathXSeries_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _FreesteelPython.vecPathXSeries___nonzero__(*args)
    def __len__(*args): return _FreesteelPython.vecPathXSeries___len__(*args)
    def pop(*args): return _FreesteelPython.vecPathXSeries_pop(*args)
    def __getslice__(*args): return _FreesteelPython.vecPathXSeries___getslice__(*args)
    def __setslice__(*args): return _FreesteelPython.vecPathXSeries___setslice__(*args)
    def __delslice__(*args): return _FreesteelPython.vecPathXSeries___delslice__(*args)
    def __delitem__(*args): return _FreesteelPython.vecPathXSeries___delitem__(*args)
    def __getitem__(*args): return _FreesteelPython.vecPathXSeries___getitem__(*args)
    def __setitem__(*args): return _FreesteelPython.vecPathXSeries___setitem__(*args)
    def append(*args): return _FreesteelPython.vecPathXSeries_append(*args)
    def empty(*args): return _FreesteelPython.vecPathXSeries_empty(*args)
    def size(*args): return _FreesteelPython.vecPathXSeries_size(*args)
    def clear(*args): return _FreesteelPython.vecPathXSeries_clear(*args)
    def swap(*args): return _FreesteelPython.vecPathXSeries_swap(*args)
    def get_allocator(*args): return _FreesteelPython.vecPathXSeries_get_allocator(*args)
    def begin(*args): return _FreesteelPython.vecPathXSeries_begin(*args)
    def end(*args): return _FreesteelPython.vecPathXSeries_end(*args)
    def rbegin(*args): return _FreesteelPython.vecPathXSeries_rbegin(*args)
    def rend(*args): return _FreesteelPython.vecPathXSeries_rend(*args)
    def pop_back(*args): return _FreesteelPython.vecPathXSeries_pop_back(*args)
    def erase(*args): return _FreesteelPython.vecPathXSeries_erase(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_vecPathXSeries(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _FreesteelPython.vecPathXSeries_push_back(*args)
    def front(*args): return _FreesteelPython.vecPathXSeries_front(*args)
    def back(*args): return _FreesteelPython.vecPathXSeries_back(*args)
    def assign(*args): return _FreesteelPython.vecPathXSeries_assign(*args)
    def resize(*args): return _FreesteelPython.vecPathXSeries_resize(*args)
    def insert(*args): return _FreesteelPython.vecPathXSeries_insert(*args)
    def reserve(*args): return _FreesteelPython.vecPathXSeries_reserve(*args)
    def capacity(*args): return _FreesteelPython.vecPathXSeries_capacity(*args)
    __swig_destroy__ = _FreesteelPython.delete_vecPathXSeries
    __del__ = lambda self : None;
vecPathXSeries_swigregister = _FreesteelPython.vecPathXSeries_swigregister
vecPathXSeries_swigregister(vecPathXSeries)

class ToolShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ToolShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ToolShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flatrad"] = _FreesteelPython.ToolShape_flatrad_set
    __swig_getmethods__["flatrad"] = _FreesteelPython.ToolShape_flatrad_get
    if _newclass:flatrad = _swig_property(_FreesteelPython.ToolShape_flatrad_get, _FreesteelPython.ToolShape_flatrad_set)
    __swig_setmethods__["cornerrad"] = _FreesteelPython.ToolShape_cornerrad_set
    __swig_getmethods__["cornerrad"] = _FreesteelPython.ToolShape_cornerrad_get
    if _newclass:cornerrad = _swig_property(_FreesteelPython.ToolShape_cornerrad_get, _FreesteelPython.ToolShape_cornerrad_set)
    __swig_setmethods__["sliceheight"] = _FreesteelPython.ToolShape_sliceheight_set
    __swig_getmethods__["sliceheight"] = _FreesteelPython.ToolShape_sliceheight_get
    if _newclass:sliceheight = _swig_property(_FreesteelPython.ToolShape_sliceheight_get, _FreesteelPython.ToolShape_sliceheight_set)
    __swig_setmethods__["ntoolslices"] = _FreesteelPython.ToolShape_ntoolslices_set
    __swig_getmethods__["ntoolslices"] = _FreesteelPython.ToolShape_ntoolslices_get
    if _newclass:ntoolslices = _swig_property(_FreesteelPython.ToolShape_ntoolslices_get, _FreesteelPython.ToolShape_ntoolslices_set)
    __swig_setmethods__["nang"] = _FreesteelPython.ToolShape_nang_set
    __swig_getmethods__["nang"] = _FreesteelPython.ToolShape_nang_get
    if _newclass:nang = _swig_property(_FreesteelPython.ToolShape_nang_get, _FreesteelPython.ToolShape_nang_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_ToolShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def RadAtHeight(*args): return _FreesteelPython.ToolShape_RadAtHeight(*args)
    def ConstructToolShape(*args): return _FreesteelPython.ToolShape_ConstructToolShape(*args)
    def Draw(*args): return _FreesteelPython.ToolShape_Draw(*args)
    def DrawColourRange(*args): return _FreesteelPython.ToolShape_DrawColourRange(*args)
    __swig_destroy__ = _FreesteelPython.delete_ToolShape
    __del__ = lambda self : None;
ToolShape_swigregister = _FreesteelPython.ToolShape_swigregister
ToolShape_swigregister(ToolShape)

class MachineParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MachineParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MachineParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["leadoffdz"] = _FreesteelPython.MachineParams_leadoffdz_set
    __swig_getmethods__["leadoffdz"] = _FreesteelPython.MachineParams_leadoffdz_get
    if _newclass:leadoffdz = _swig_property(_FreesteelPython.MachineParams_leadoffdz_get, _FreesteelPython.MachineParams_leadoffdz_set)
    __swig_setmethods__["leadofflen"] = _FreesteelPython.MachineParams_leadofflen_set
    __swig_getmethods__["leadofflen"] = _FreesteelPython.MachineParams_leadofflen_get
    if _newclass:leadofflen = _swig_property(_FreesteelPython.MachineParams_leadofflen_get, _FreesteelPython.MachineParams_leadofflen_set)
    __swig_setmethods__["leadoffrad"] = _FreesteelPython.MachineParams_leadoffrad_set
    __swig_getmethods__["leadoffrad"] = _FreesteelPython.MachineParams_leadoffrad_get
    if _newclass:leadoffrad = _swig_property(_FreesteelPython.MachineParams_leadoffrad_get, _FreesteelPython.MachineParams_leadoffrad_set)
    __swig_setmethods__["retractzheight"] = _FreesteelPython.MachineParams_retractzheight_set
    __swig_getmethods__["retractzheight"] = _FreesteelPython.MachineParams_retractzheight_get
    if _newclass:retractzheight = _swig_property(_FreesteelPython.MachineParams_retractzheight_get, _FreesteelPython.MachineParams_retractzheight_set)
    __swig_setmethods__["leadoffsamplestep"] = _FreesteelPython.MachineParams_leadoffsamplestep_set
    __swig_getmethods__["leadoffsamplestep"] = _FreesteelPython.MachineParams_leadoffsamplestep_get
    if _newclass:leadoffsamplestep = _swig_property(_FreesteelPython.MachineParams_leadoffsamplestep_get, _FreesteelPython.MachineParams_leadoffsamplestep_set)
    __swig_setmethods__["toolcornerrad"] = _FreesteelPython.MachineParams_toolcornerrad_set
    __swig_getmethods__["toolcornerrad"] = _FreesteelPython.MachineParams_toolcornerrad_get
    if _newclass:toolcornerrad = _swig_property(_FreesteelPython.MachineParams_toolcornerrad_get, _FreesteelPython.MachineParams_toolcornerrad_set)
    __swig_setmethods__["toolflatrad"] = _FreesteelPython.MachineParams_toolflatrad_set
    __swig_getmethods__["toolflatrad"] = _FreesteelPython.MachineParams_toolflatrad_get
    if _newclass:toolflatrad = _swig_property(_FreesteelPython.MachineParams_toolflatrad_get, _FreesteelPython.MachineParams_toolflatrad_set)
    __swig_setmethods__["samplestep"] = _FreesteelPython.MachineParams_samplestep_set
    __swig_getmethods__["samplestep"] = _FreesteelPython.MachineParams_samplestep_get
    if _newclass:samplestep = _swig_property(_FreesteelPython.MachineParams_samplestep_get, _FreesteelPython.MachineParams_samplestep_set)
    __swig_setmethods__["stepdown"] = _FreesteelPython.MachineParams_stepdown_set
    __swig_getmethods__["stepdown"] = _FreesteelPython.MachineParams_stepdown_get
    if _newclass:stepdown = _swig_property(_FreesteelPython.MachineParams_stepdown_get, _FreesteelPython.MachineParams_stepdown_set)
    __swig_setmethods__["clearcuspheight"] = _FreesteelPython.MachineParams_clearcuspheight_set
    __swig_getmethods__["clearcuspheight"] = _FreesteelPython.MachineParams_clearcuspheight_get
    if _newclass:clearcuspheight = _swig_property(_FreesteelPython.MachineParams_clearcuspheight_get, _FreesteelPython.MachineParams_clearcuspheight_set)
    __swig_setmethods__["triangleweaveres"] = _FreesteelPython.MachineParams_triangleweaveres_set
    __swig_getmethods__["triangleweaveres"] = _FreesteelPython.MachineParams_triangleweaveres_get
    if _newclass:triangleweaveres = _swig_property(_FreesteelPython.MachineParams_triangleweaveres_get, _FreesteelPython.MachineParams_triangleweaveres_set)
    __swig_setmethods__["flatradweaveres"] = _FreesteelPython.MachineParams_flatradweaveres_set
    __swig_getmethods__["flatradweaveres"] = _FreesteelPython.MachineParams_flatradweaveres_get
    if _newclass:flatradweaveres = _swig_property(_FreesteelPython.MachineParams_flatradweaveres_get, _FreesteelPython.MachineParams_flatradweaveres_set)
    __swig_setmethods__["dchangright"] = _FreesteelPython.MachineParams_dchangright_set
    __swig_getmethods__["dchangright"] = _FreesteelPython.MachineParams_dchangright_get
    if _newclass:dchangright = _swig_property(_FreesteelPython.MachineParams_dchangright_get, _FreesteelPython.MachineParams_dchangright_set)
    __swig_setmethods__["dchangrightoncontour"] = _FreesteelPython.MachineParams_dchangrightoncontour_set
    __swig_getmethods__["dchangrightoncontour"] = _FreesteelPython.MachineParams_dchangrightoncontour_get
    if _newclass:dchangrightoncontour = _swig_property(_FreesteelPython.MachineParams_dchangrightoncontour_get, _FreesteelPython.MachineParams_dchangrightoncontour_set)
    __swig_setmethods__["dchangleft"] = _FreesteelPython.MachineParams_dchangleft_set
    __swig_getmethods__["dchangleft"] = _FreesteelPython.MachineParams_dchangleft_get
    if _newclass:dchangleft = _swig_property(_FreesteelPython.MachineParams_dchangleft_get, _FreesteelPython.MachineParams_dchangleft_set)
    __swig_setmethods__["dchangefreespace"] = _FreesteelPython.MachineParams_dchangefreespace_set
    __swig_getmethods__["dchangefreespace"] = _FreesteelPython.MachineParams_dchangefreespace_get
    if _newclass:dchangefreespace = _swig_property(_FreesteelPython.MachineParams_dchangefreespace_get, _FreesteelPython.MachineParams_dchangefreespace_set)
    __swig_setmethods__["sidecutdisplch"] = _FreesteelPython.MachineParams_sidecutdisplch_set
    __swig_getmethods__["sidecutdisplch"] = _FreesteelPython.MachineParams_sidecutdisplch_get
    if _newclass:sidecutdisplch = _swig_property(_FreesteelPython.MachineParams_sidecutdisplch_get, _FreesteelPython.MachineParams_sidecutdisplch_set)
    __swig_setmethods__["fcut"] = _FreesteelPython.MachineParams_fcut_set
    __swig_getmethods__["fcut"] = _FreesteelPython.MachineParams_fcut_get
    if _newclass:fcut = _swig_property(_FreesteelPython.MachineParams_fcut_get, _FreesteelPython.MachineParams_fcut_set)
    __swig_setmethods__["fretract"] = _FreesteelPython.MachineParams_fretract_set
    __swig_getmethods__["fretract"] = _FreesteelPython.MachineParams_fretract_get
    if _newclass:fretract = _swig_property(_FreesteelPython.MachineParams_fretract_get, _FreesteelPython.MachineParams_fretract_set)
    __swig_setmethods__["thintol"] = _FreesteelPython.MachineParams_thintol_set
    __swig_getmethods__["thintol"] = _FreesteelPython.MachineParams_thintol_get
    if _newclass:thintol = _swig_property(_FreesteelPython.MachineParams_thintol_get, _FreesteelPython.MachineParams_thintol_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_MachineParams(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_MachineParams
    __del__ = lambda self : None;
MachineParams_swigregister = _FreesteelPython.MachineParams_swigregister
MachineParams_swigregister(MachineParams)

class CoreRoughGeneration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoreRoughGeneration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CoreRoughGeneration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["machxrg"] = _FreesteelPython.CoreRoughGeneration_machxrg_set
    __swig_getmethods__["machxrg"] = _FreesteelPython.CoreRoughGeneration_machxrg_get
    if _newclass:machxrg = _swig_property(_FreesteelPython.CoreRoughGeneration_machxrg_get, _FreesteelPython.CoreRoughGeneration_machxrg_set)
    __swig_setmethods__["machyrg"] = _FreesteelPython.CoreRoughGeneration_machyrg_set
    __swig_getmethods__["machyrg"] = _FreesteelPython.CoreRoughGeneration_machyrg_get
    if _newclass:machyrg = _swig_property(_FreesteelPython.CoreRoughGeneration_machyrg_get, _FreesteelPython.CoreRoughGeneration_machyrg_set)
    __swig_setmethods__["tsbound"] = _FreesteelPython.CoreRoughGeneration_tsbound_set
    __swig_getmethods__["tsbound"] = _FreesteelPython.CoreRoughGeneration_tsbound_get
    if _newclass:tsbound = _swig_property(_FreesteelPython.CoreRoughGeneration_tsbound_get, _FreesteelPython.CoreRoughGeneration_tsbound_set)
    __swig_setmethods__["pa2gg"] = _FreesteelPython.CoreRoughGeneration_pa2gg_set
    __swig_getmethods__["pa2gg"] = _FreesteelPython.CoreRoughGeneration_pa2gg_get
    if _newclass:pa2gg = _swig_property(_FreesteelPython.CoreRoughGeneration_pa2gg_get, _FreesteelPython.CoreRoughGeneration_pa2gg_set)
    __swig_setmethods__["wc"] = _FreesteelPython.CoreRoughGeneration_wc_set
    __swig_getmethods__["wc"] = _FreesteelPython.CoreRoughGeneration_wc_get
    if _newclass:wc = _swig_property(_FreesteelPython.CoreRoughGeneration_wc_get, _FreesteelPython.CoreRoughGeneration_wc_set)
    __swig_setmethods__["trad"] = _FreesteelPython.CoreRoughGeneration_trad_set
    __swig_getmethods__["trad"] = _FreesteelPython.CoreRoughGeneration_trad_get
    if _newclass:trad = _swig_property(_FreesteelPython.CoreRoughGeneration_trad_get, _FreesteelPython.CoreRoughGeneration_trad_set)
    __swig_setmethods__["countfreespacesteps"] = _FreesteelPython.CoreRoughGeneration_countfreespacesteps_set
    __swig_getmethods__["countfreespacesteps"] = _FreesteelPython.CoreRoughGeneration_countfreespacesteps_get
    if _newclass:countfreespacesteps = _swig_property(_FreesteelPython.CoreRoughGeneration_countfreespacesteps_get, _FreesteelPython.CoreRoughGeneration_countfreespacesteps_set)
    __swig_setmethods__["pathxb"] = _FreesteelPython.CoreRoughGeneration_pathxb_set
    __swig_getmethods__["pathxb"] = _FreesteelPython.CoreRoughGeneration_pathxb_get
    if _newclass:pathxb = _swig_property(_FreesteelPython.CoreRoughGeneration_pathxb_get, _FreesteelPython.CoreRoughGeneration_pathxb_set)
    __swig_setmethods__["bcellixs"] = _FreesteelPython.CoreRoughGeneration_bcellixs_set
    __swig_getmethods__["bcellixs"] = _FreesteelPython.CoreRoughGeneration_bcellixs_get
    if _newclass:bcellixs = _swig_property(_FreesteelPython.CoreRoughGeneration_bcellixs_get, _FreesteelPython.CoreRoughGeneration_bcellixs_set)
    __swig_setmethods__["bPrevPointDoubleRange"] = _FreesteelPython.CoreRoughGeneration_bPrevPointDoubleRange_set
    __swig_getmethods__["bPrevPointDoubleRange"] = _FreesteelPython.CoreRoughGeneration_bPrevPointDoubleRange_get
    if _newclass:bPrevPointDoubleRange = _swig_property(_FreesteelPython.CoreRoughGeneration_bPrevPointDoubleRange_get, _FreesteelPython.CoreRoughGeneration_bPrevPointDoubleRange_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_CoreRoughGeneration(*args)
        try: self.this.append(this)
        except: self.this = this
    def FindGoStart(*args): return _FreesteelPython.CoreRoughGeneration_FindGoStart(*args)
    def RestartAtBCI(*args): return _FreesteelPython.CoreRoughGeneration_RestartAtBCI(*args)
    def ChangeBearing(*args): return _FreesteelPython.CoreRoughGeneration_ChangeBearing(*args)
    def AddPoint(*args): return _FreesteelPython.CoreRoughGeneration_AddPoint(*args)
    def GrabberAlg(*args): return _FreesteelPython.CoreRoughGeneration_GrabberAlg(*args)
    def TrackLink(*args): return _FreesteelPython.CoreRoughGeneration_TrackLink(*args)
    def setWeave(*args): return _FreesteelPython.CoreRoughGeneration_setWeave(*args)
    __swig_destroy__ = _FreesteelPython.delete_CoreRoughGeneration
    __del__ = lambda self : None;
CoreRoughGeneration_swigregister = _FreesteelPython.CoreRoughGeneration_swigregister
CoreRoughGeneration_swigregister(CoreRoughGeneration)

class vecP2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vecP2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vecP2, name)
    __repr__ = _swig_repr
    def iterator(*args): return _FreesteelPython.vecP2_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _FreesteelPython.vecP2___nonzero__(*args)
    def __len__(*args): return _FreesteelPython.vecP2___len__(*args)
    def pop(*args): return _FreesteelPython.vecP2_pop(*args)
    def __getslice__(*args): return _FreesteelPython.vecP2___getslice__(*args)
    def __setslice__(*args): return _FreesteelPython.vecP2___setslice__(*args)
    def __delslice__(*args): return _FreesteelPython.vecP2___delslice__(*args)
    def __delitem__(*args): return _FreesteelPython.vecP2___delitem__(*args)
    def __getitem__(*args): return _FreesteelPython.vecP2___getitem__(*args)
    def __setitem__(*args): return _FreesteelPython.vecP2___setitem__(*args)
    def append(*args): return _FreesteelPython.vecP2_append(*args)
    def empty(*args): return _FreesteelPython.vecP2_empty(*args)
    def size(*args): return _FreesteelPython.vecP2_size(*args)
    def clear(*args): return _FreesteelPython.vecP2_clear(*args)
    def swap(*args): return _FreesteelPython.vecP2_swap(*args)
    def get_allocator(*args): return _FreesteelPython.vecP2_get_allocator(*args)
    def begin(*args): return _FreesteelPython.vecP2_begin(*args)
    def end(*args): return _FreesteelPython.vecP2_end(*args)
    def rbegin(*args): return _FreesteelPython.vecP2_rbegin(*args)
    def rend(*args): return _FreesteelPython.vecP2_rend(*args)
    def pop_back(*args): return _FreesteelPython.vecP2_pop_back(*args)
    def erase(*args): return _FreesteelPython.vecP2_erase(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_vecP2(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _FreesteelPython.vecP2_push_back(*args)
    def front(*args): return _FreesteelPython.vecP2_front(*args)
    def back(*args): return _FreesteelPython.vecP2_back(*args)
    def assign(*args): return _FreesteelPython.vecP2_assign(*args)
    def resize(*args): return _FreesteelPython.vecP2_resize(*args)
    def insert(*args): return _FreesteelPython.vecP2_insert(*args)
    def reserve(*args): return _FreesteelPython.vecP2_reserve(*args)
    def capacity(*args): return _FreesteelPython.vecP2_capacity(*args)
    __swig_destroy__ = _FreesteelPython.delete_vecP2
    __del__ = lambda self : None;
vecP2_swigregister = _FreesteelPython.vecP2_swigregister
vecP2_swigregister(vecP2)

class vecint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vecint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vecint, name)
    __repr__ = _swig_repr
    def iterator(*args): return _FreesteelPython.vecint_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _FreesteelPython.vecint___nonzero__(*args)
    def __len__(*args): return _FreesteelPython.vecint___len__(*args)
    def pop(*args): return _FreesteelPython.vecint_pop(*args)
    def __getslice__(*args): return _FreesteelPython.vecint___getslice__(*args)
    def __setslice__(*args): return _FreesteelPython.vecint___setslice__(*args)
    def __delslice__(*args): return _FreesteelPython.vecint___delslice__(*args)
    def __delitem__(*args): return _FreesteelPython.vecint___delitem__(*args)
    def __getitem__(*args): return _FreesteelPython.vecint___getitem__(*args)
    def __setitem__(*args): return _FreesteelPython.vecint___setitem__(*args)
    def append(*args): return _FreesteelPython.vecint_append(*args)
    def empty(*args): return _FreesteelPython.vecint_empty(*args)
    def size(*args): return _FreesteelPython.vecint_size(*args)
    def clear(*args): return _FreesteelPython.vecint_clear(*args)
    def swap(*args): return _FreesteelPython.vecint_swap(*args)
    def get_allocator(*args): return _FreesteelPython.vecint_get_allocator(*args)
    def begin(*args): return _FreesteelPython.vecint_begin(*args)
    def end(*args): return _FreesteelPython.vecint_end(*args)
    def rbegin(*args): return _FreesteelPython.vecint_rbegin(*args)
    def rend(*args): return _FreesteelPython.vecint_rend(*args)
    def pop_back(*args): return _FreesteelPython.vecint_pop_back(*args)
    def erase(*args): return _FreesteelPython.vecint_erase(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_vecint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _FreesteelPython.vecint_push_back(*args)
    def front(*args): return _FreesteelPython.vecint_front(*args)
    def back(*args): return _FreesteelPython.vecint_back(*args)
    def assign(*args): return _FreesteelPython.vecint_assign(*args)
    def resize(*args): return _FreesteelPython.vecint_resize(*args)
    def insert(*args): return _FreesteelPython.vecint_insert(*args)
    def reserve(*args): return _FreesteelPython.vecint_reserve(*args)
    def capacity(*args): return _FreesteelPython.vecint_capacity(*args)
    __swig_destroy__ = _FreesteelPython.delete_vecint
    __del__ = lambda self : None;
vecint_swigregister = _FreesteelPython.vecint_swigregister
vecint_swigregister(vecint)

class PathXSeries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathXSeries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathXSeries, name)
    __repr__ = _swig_repr
    __swig_setmethods__["z"] = _FreesteelPython.PathXSeries_z_set
    __swig_getmethods__["z"] = _FreesteelPython.PathXSeries_z_get
    if _newclass:z = _swig_property(_FreesteelPython.PathXSeries_z_get, _FreesteelPython.PathXSeries_z_set)
    __swig_setmethods__["pths"] = _FreesteelPython.PathXSeries_pths_set
    __swig_getmethods__["pths"] = _FreesteelPython.PathXSeries_pths_get
    if _newclass:pths = _swig_property(_FreesteelPython.PathXSeries_pths_get, _FreesteelPython.PathXSeries_pths_set)
    __swig_setmethods__["brks"] = _FreesteelPython.PathXSeries_brks_set
    __swig_getmethods__["brks"] = _FreesteelPython.PathXSeries_brks_get
    if _newclass:brks = _swig_property(_FreesteelPython.PathXSeries_brks_get, _FreesteelPython.PathXSeries_brks_set)
    __swig_setmethods__["linkpths"] = _FreesteelPython.PathXSeries_linkpths_set
    __swig_getmethods__["linkpths"] = _FreesteelPython.PathXSeries_linkpths_get
    if _newclass:linkpths = _swig_property(_FreesteelPython.PathXSeries_linkpths_get, _FreesteelPython.PathXSeries_linkpths_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_PathXSeries(*args)
        try: self.this.append(this)
        except: self.this = this
    def Add(*args): return _FreesteelPython.PathXSeries_Add(*args)
    def Append(*args): return _FreesteelPython.PathXSeries_Append(*args)
    def Break(*args): return _FreesteelPython.PathXSeries_Break(*args)
    def Pop_back(*args): return _FreesteelPython.PathXSeries_Pop_back(*args)
    def GetNbrks(*args): return _FreesteelPython.PathXSeries_GetNbrks(*args)
    def GetBrkIndex(*args): return _FreesteelPython.PathXSeries_GetBrkIndex(*args)
    def GetNlnks(*args): return _FreesteelPython.PathXSeries_GetNlnks(*args)
    def GetLinkX(*args): return _FreesteelPython.PathXSeries_GetLinkX(*args)
    def GetLinkY(*args): return _FreesteelPython.PathXSeries_GetLinkY(*args)
    def GetLinkZ(*args): return _FreesteelPython.PathXSeries_GetLinkZ(*args)
    def GetNpts(*args): return _FreesteelPython.PathXSeries_GetNpts(*args)
    def GetX(*args): return _FreesteelPython.PathXSeries_GetX(*args)
    def GetY(*args): return _FreesteelPython.PathXSeries_GetY(*args)
    __swig_destroy__ = _FreesteelPython.delete_PathXSeries
    __del__ = lambda self : None;
PathXSeries_swigregister = _FreesteelPython.PathXSeries_swigregister
PathXSeries_swigregister(PathXSeries)

class ckpline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ckpline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ckpline, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iseg"] = _FreesteelPython.ckpline_iseg_set
    __swig_getmethods__["iseg"] = _FreesteelPython.ckpline_iseg_get
    if _newclass:iseg = _swig_property(_FreesteelPython.ckpline_iseg_get, _FreesteelPython.ckpline_iseg_set)
    __swig_setmethods__["idup"] = _FreesteelPython.ckpline_idup_set
    __swig_getmethods__["idup"] = _FreesteelPython.ckpline_idup_get
    if _newclass:idup = _swig_property(_FreesteelPython.ckpline_idup_get, _FreesteelPython.ckpline_idup_set)
    __swig_setmethods__["vmid"] = _FreesteelPython.ckpline_vmid_set
    __swig_getmethods__["vmid"] = _FreesteelPython.ckpline_vmid_get
    if _newclass:vmid = _swig_property(_FreesteelPython.ckpline_vmid_get, _FreesteelPython.ckpline_vmid_set)
    __swig_setmethods__["vrad"] = _FreesteelPython.ckpline_vrad_set
    __swig_getmethods__["vrad"] = _FreesteelPython.ckpline_vrad_get
    if _newclass:vrad = _swig_property(_FreesteelPython.ckpline_vrad_get, _FreesteelPython.ckpline_vrad_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_ckpline(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_ckpline
    __del__ = lambda self : None;
ckpline_swigregister = _FreesteelPython.ckpline_swigregister
ckpline_swigregister(ckpline)

class pucketX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pucketX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pucketX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ckpoints"] = _FreesteelPython.pucketX_ckpoints_set
    __swig_getmethods__["ckpoints"] = _FreesteelPython.pucketX_ckpoints_get
    if _newclass:ckpoints = _swig_property(_FreesteelPython.pucketX_ckpoints_get, _FreesteelPython.pucketX_ckpoints_set)
    __swig_setmethods__["cklines"] = _FreesteelPython.pucketX_cklines_set
    __swig_getmethods__["cklines"] = _FreesteelPython.pucketX_cklines_get
    if _newclass:cklines = _swig_property(_FreesteelPython.pucketX_cklines_get, _FreesteelPython.pucketX_cklines_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_pucketX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_pucketX
    __del__ = lambda self : None;
pucketX_swigregister = _FreesteelPython.pucketX_swigregister
pucketX_swigregister(pucketX)

class PathXboxed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathXboxed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathXboxed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ppathx"] = _FreesteelPython.PathXboxed_ppathx_set
    __swig_getmethods__["ppathx"] = _FreesteelPython.PathXboxed_ppathx_get
    if _newclass:ppathx = _swig_property(_FreesteelPython.PathXboxed_ppathx_get, _FreesteelPython.PathXboxed_ppathx_set)
    __swig_setmethods__["gburg"] = _FreesteelPython.PathXboxed_gburg_set
    __swig_getmethods__["gburg"] = _FreesteelPython.PathXboxed_gburg_get
    if _newclass:gburg = _swig_property(_FreesteelPython.PathXboxed_gburg_get, _FreesteelPython.PathXboxed_gburg_set)
    __swig_setmethods__["bGeoOutLeft"] = _FreesteelPython.PathXboxed_bGeoOutLeft_set
    __swig_getmethods__["bGeoOutLeft"] = _FreesteelPython.PathXboxed_bGeoOutLeft_get
    if _newclass:bGeoOutLeft = _swig_property(_FreesteelPython.PathXboxed_bGeoOutLeft_get, _FreesteelPython.PathXboxed_bGeoOutLeft_set)
    __swig_setmethods__["bGeoOutRight"] = _FreesteelPython.PathXboxed_bGeoOutRight_set
    __swig_getmethods__["bGeoOutRight"] = _FreesteelPython.PathXboxed_bGeoOutRight_get
    if _newclass:bGeoOutRight = _swig_property(_FreesteelPython.PathXboxed_bGeoOutRight_get, _FreesteelPython.PathXboxed_bGeoOutRight_set)
    __swig_setmethods__["upart"] = _FreesteelPython.PathXboxed_upart_set
    __swig_getmethods__["upart"] = _FreesteelPython.PathXboxed_upart_get
    if _newclass:upart = _swig_property(_FreesteelPython.PathXboxed_upart_get, _FreesteelPython.PathXboxed_upart_set)
    __swig_setmethods__["puckets"] = _FreesteelPython.PathXboxed_puckets_set
    __swig_getmethods__["puckets"] = _FreesteelPython.PathXboxed_puckets_get
    if _newclass:puckets = _swig_property(_FreesteelPython.PathXboxed_puckets_get, _FreesteelPython.PathXboxed_puckets_set)
    __swig_setmethods__["tsbound"] = _FreesteelPython.PathXboxed_tsbound_set
    __swig_getmethods__["tsbound"] = _FreesteelPython.PathXboxed_tsbound_get
    if _newclass:tsbound = _swig_property(_FreesteelPython.PathXboxed_tsbound_get, _FreesteelPython.PathXboxed_tsbound_set)
    __swig_setmethods__["idups"] = _FreesteelPython.PathXboxed_idups_set
    __swig_getmethods__["idups"] = _FreesteelPython.PathXboxed_idups_get
    if _newclass:idups = _swig_property(_FreesteelPython.PathXboxed_idups_get, _FreesteelPython.PathXboxed_idups_set)
    __swig_setmethods__["maxidup"] = _FreesteelPython.PathXboxed_maxidup_set
    __swig_getmethods__["maxidup"] = _FreesteelPython.PathXboxed_maxidup_get
    if _newclass:maxidup = _swig_property(_FreesteelPython.PathXboxed_maxidup_get, _FreesteelPython.PathXboxed_maxidup_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_PathXboxed(*args)
        try: self.this.append(this)
        except: self.this = this
    def BuildBoxes(*args): return _FreesteelPython.PathXboxed_BuildBoxes(*args)
    def PutSegment(*args): return _FreesteelPython.PathXboxed_PutSegment(*args)
    def Add(*args): return _FreesteelPython.PathXboxed_Add(*args)
    def Break(*args): return _FreesteelPython.PathXboxed_Break(*args)
    def Pop_back(*args): return _FreesteelPython.PathXboxed_Pop_back(*args)
    __swig_destroy__ = _FreesteelPython.delete_PathXboxed
    __del__ = lambda self : None;
PathXboxed_swigregister = _FreesteelPython.PathXboxed_swigregister
PathXboxed_swigregister(PathXboxed)

class edgeX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edgeX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edgeX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p0"] = _FreesteelPython.edgeX_p0_set
    __swig_getmethods__["p0"] = _FreesteelPython.edgeX_p0_get
    if _newclass:p0 = _swig_property(_FreesteelPython.edgeX_p0_get, _FreesteelPython.edgeX_p0_set)
    __swig_setmethods__["p1"] = _FreesteelPython.edgeX_p1_set
    __swig_getmethods__["p1"] = _FreesteelPython.edgeX_p1_get
    if _newclass:p1 = _swig_property(_FreesteelPython.edgeX_p1_get, _FreesteelPython.edgeX_p1_set)
    __swig_setmethods__["tpR"] = _FreesteelPython.edgeX_tpR_set
    __swig_getmethods__["tpR"] = _FreesteelPython.edgeX_tpR_get
    if _newclass:tpR = _swig_property(_FreesteelPython.edgeX_tpR_get, _FreesteelPython.edgeX_tpR_set)
    __swig_setmethods__["tpL"] = _FreesteelPython.edgeX_tpL_set
    __swig_getmethods__["tpL"] = _FreesteelPython.edgeX_tpL_get
    if _newclass:tpL = _swig_property(_FreesteelPython.edgeX_tpL_get, _FreesteelPython.edgeX_tpL_set)
    __swig_setmethods__["rdR"] = _FreesteelPython.edgeX_rdR_set
    __swig_getmethods__["rdR"] = _FreesteelPython.edgeX_rdR_get
    if _newclass:rdR = _swig_property(_FreesteelPython.edgeX_rdR_get, _FreesteelPython.edgeX_rdR_set)
    __swig_setmethods__["rdL"] = _FreesteelPython.edgeX_rdL_set
    __swig_getmethods__["rdL"] = _FreesteelPython.edgeX_rdL_get
    if _newclass:rdL = _swig_property(_FreesteelPython.edgeX_rdL_get, _FreesteelPython.edgeX_rdL_set)
    __swig_setmethods__["sidecheck4"] = _FreesteelPython.edgeX_sidecheck4_set
    __swig_getmethods__["sidecheck4"] = _FreesteelPython.edgeX_sidecheck4_get
    if _newclass:sidecheck4 = _swig_property(_FreesteelPython.edgeX_sidecheck4_get, _FreesteelPython.edgeX_sidecheck4_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_edgeX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_edgeX
    __del__ = lambda self : None;
edgeX_swigregister = _FreesteelPython.edgeX_swigregister
edgeX_swigregister(edgeX)

class triangX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, triangX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, triangX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ab1"] = _FreesteelPython.triangX_ab1_set
    __swig_getmethods__["ab1"] = _FreesteelPython.triangX_ab1_get
    if _newclass:ab1 = _swig_property(_FreesteelPython.triangX_ab1_get, _FreesteelPython.triangX_ab1_set)
    __swig_setmethods__["ab2"] = _FreesteelPython.triangX_ab2_set
    __swig_getmethods__["ab2"] = _FreesteelPython.triangX_ab2_get
    if _newclass:ab2 = _swig_property(_FreesteelPython.triangX_ab2_get, _FreesteelPython.triangX_ab2_set)
    __swig_setmethods__["b12"] = _FreesteelPython.triangX_b12_set
    __swig_getmethods__["b12"] = _FreesteelPython.triangX_b12_get
    if _newclass:b12 = _swig_property(_FreesteelPython.triangX_b12_get, _FreesteelPython.triangX_b12_set)
    __swig_setmethods__["tnorm"] = _FreesteelPython.triangX_tnorm_set
    __swig_getmethods__["tnorm"] = _FreesteelPython.triangX_tnorm_get
    if _newclass:tnorm = _swig_property(_FreesteelPython.triangX_tnorm_get, _FreesteelPython.triangX_tnorm_set)
    __swig_setmethods__["tp"] = _FreesteelPython.triangX_tp_set
    __swig_getmethods__["tp"] = _FreesteelPython.triangX_tp_get
    if _newclass:tp = _swig_property(_FreesteelPython.triangX_tp_get, _FreesteelPython.triangX_tp_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_triangX(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetEdge(*args): return _FreesteelPython.triangX_SetEdge(*args)
    def FirstPoint(*args): return _FreesteelPython.triangX_FirstPoint(*args)
    def SecondPoint(*args): return _FreesteelPython.triangX_SecondPoint(*args)
    def ThirdPoint(*args): return _FreesteelPython.triangX_ThirdPoint(*args)
    __swig_destroy__ = _FreesteelPython.delete_triangX
    __del__ = lambda self : None;
triangX_swigregister = _FreesteelPython.triangX_swigregister
triangX_swigregister(triangX)

class SurfX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurfX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SurfX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gxrg"] = _FreesteelPython.SurfX_gxrg_set
    __swig_getmethods__["gxrg"] = _FreesteelPython.SurfX_gxrg_get
    if _newclass:gxrg = _swig_property(_FreesteelPython.SurfX_gxrg_get, _FreesteelPython.SurfX_gxrg_set)
    __swig_setmethods__["gyrg"] = _FreesteelPython.SurfX_gyrg_set
    __swig_getmethods__["gyrg"] = _FreesteelPython.SurfX_gyrg_get
    if _newclass:gyrg = _swig_property(_FreesteelPython.SurfX_gyrg_get, _FreesteelPython.SurfX_gyrg_set)
    __swig_setmethods__["gzrg"] = _FreesteelPython.SurfX_gzrg_set
    __swig_getmethods__["gzrg"] = _FreesteelPython.SurfX_gzrg_get
    if _newclass:gzrg = _swig_property(_FreesteelPython.SurfX_gzrg_get, _FreesteelPython.SurfX_gzrg_set)
    __swig_setmethods__["rangestate"] = _FreesteelPython.SurfX_rangestate_set
    __swig_getmethods__["rangestate"] = _FreesteelPython.SurfX_rangestate_get
    if _newclass:rangestate = _swig_property(_FreesteelPython.SurfX_rangestate_get, _FreesteelPython.SurfX_rangestate_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_SurfX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["lvd"] = _FreesteelPython.SurfX_lvd_set
    __swig_getmethods__["lvd"] = _FreesteelPython.SurfX_lvd_get
    if _newclass:lvd = _swig_property(_FreesteelPython.SurfX_lvd_get, _FreesteelPython.SurfX_lvd_set)
    __swig_setmethods__["ltd"] = _FreesteelPython.SurfX_ltd_set
    __swig_getmethods__["ltd"] = _FreesteelPython.SurfX_ltd_get
    if _newclass:ltd = _swig_property(_FreesteelPython.SurfX_ltd_get, _FreesteelPython.SurfX_ltd_set)
    def PushTriangle(*args): return _FreesteelPython.SurfX_PushTriangle(*args)
    __swig_setmethods__["vdX"] = _FreesteelPython.SurfX_vdX_set
    __swig_getmethods__["vdX"] = _FreesteelPython.SurfX_vdX_get
    if _newclass:vdX = _swig_property(_FreesteelPython.SurfX_vdX_get, _FreesteelPython.SurfX_vdX_set)
    __swig_setmethods__["edX"] = _FreesteelPython.SurfX_edX_set
    __swig_getmethods__["edX"] = _FreesteelPython.SurfX_edX_get
    if _newclass:edX = _swig_property(_FreesteelPython.SurfX_edX_get, _FreesteelPython.SurfX_edX_set)
    __swig_setmethods__["trX"] = _FreesteelPython.SurfX_trX_set
    __swig_getmethods__["trX"] = _FreesteelPython.SurfX_trX_get
    if _newclass:trX = _swig_property(_FreesteelPython.SurfX_trX_get, _FreesteelPython.SurfX_trX_set)
    def BuildComponents(*args): return _FreesteelPython.SurfX_BuildComponents(*args)
    def SliceFibre(*args): return _FreesteelPython.SurfX_SliceFibre(*args)
    def SliceRay(*args): return _FreesteelPython.SurfX_SliceRay(*args)
    __swig_destroy__ = _FreesteelPython.delete_SurfX
    __del__ = lambda self : None;
SurfX_swigregister = _FreesteelPython.SurfX_swigregister
SurfX_swigregister(SurfX)

class ckedgeX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ckedgeX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ckedgeX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["zh"] = _FreesteelPython.ckedgeX_zh_set
    __swig_getmethods__["zh"] = _FreesteelPython.ckedgeX_zh_get
    if _newclass:zh = _swig_property(_FreesteelPython.ckedgeX_zh_get, _FreesteelPython.ckedgeX_zh_set)
    __swig_setmethods__["edx"] = _FreesteelPython.ckedgeX_edx_set
    __swig_getmethods__["edx"] = _FreesteelPython.ckedgeX_edx_get
    if _newclass:edx = _swig_property(_FreesteelPython.ckedgeX_edx_get, _FreesteelPython.ckedgeX_edx_set)
    __swig_setmethods__["idup"] = _FreesteelPython.ckedgeX_idup_set
    __swig_getmethods__["idup"] = _FreesteelPython.ckedgeX_idup_get
    if _newclass:idup = _swig_property(_FreesteelPython.ckedgeX_idup_get, _FreesteelPython.ckedgeX_idup_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_ckedgeX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_ckedgeX
    __del__ = lambda self : None;
ckedgeX_swigregister = _FreesteelPython.ckedgeX_swigregister
ckedgeX_swigregister(ckedgeX)

class cktriX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cktriX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cktriX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["zh"] = _FreesteelPython.cktriX_zh_set
    __swig_getmethods__["zh"] = _FreesteelPython.cktriX_zh_get
    if _newclass:zh = _swig_property(_FreesteelPython.cktriX_zh_get, _FreesteelPython.cktriX_zh_set)
    __swig_setmethods__["trx"] = _FreesteelPython.cktriX_trx_set
    __swig_getmethods__["trx"] = _FreesteelPython.cktriX_trx_get
    if _newclass:trx = _swig_property(_FreesteelPython.cktriX_trx_get, _FreesteelPython.cktriX_trx_set)
    __swig_setmethods__["idup"] = _FreesteelPython.cktriX_idup_set
    __swig_getmethods__["idup"] = _FreesteelPython.cktriX_idup_get
    if _newclass:idup = _swig_property(_FreesteelPython.cktriX_idup_get, _FreesteelPython.cktriX_idup_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_cktriX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_cktriX
    __del__ = lambda self : None;
cktriX_swigregister = _FreesteelPython.cktriX_swigregister
cktriX_swigregister(cktriX)

class bucketX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bucketX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bucketX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ckpoints"] = _FreesteelPython.bucketX_ckpoints_set
    __swig_getmethods__["ckpoints"] = _FreesteelPython.bucketX_ckpoints_get
    if _newclass:ckpoints = _swig_property(_FreesteelPython.bucketX_ckpoints_get, _FreesteelPython.bucketX_ckpoints_set)
    __swig_setmethods__["ckedges"] = _FreesteelPython.bucketX_ckedges_set
    __swig_getmethods__["ckedges"] = _FreesteelPython.bucketX_ckedges_get
    if _newclass:ckedges = _swig_property(_FreesteelPython.bucketX_ckedges_get, _FreesteelPython.bucketX_ckedges_set)
    __swig_setmethods__["cktriangs"] = _FreesteelPython.bucketX_cktriangs_set
    __swig_getmethods__["cktriangs"] = _FreesteelPython.bucketX_cktriangs_get
    if _newclass:cktriangs = _swig_property(_FreesteelPython.bucketX_cktriangs_get, _FreesteelPython.bucketX_cktriangs_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_bucketX(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_bucketX
    __del__ = lambda self : None;
bucketX_swigregister = _FreesteelPython.bucketX_swigregister
bucketX_swigregister(bucketX)

class SurfXboxed(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SurfXboxed, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SurfXboxed, name)
    __repr__ = _swig_repr
    __swig_setmethods__["psurfx"] = _FreesteelPython.SurfXboxed_psurfx_set
    __swig_getmethods__["psurfx"] = _FreesteelPython.SurfXboxed_psurfx_get
    if _newclass:psurfx = _swig_property(_FreesteelPython.SurfXboxed_psurfx_get, _FreesteelPython.SurfXboxed_psurfx_set)
    __swig_setmethods__["gbxrg"] = _FreesteelPython.SurfXboxed_gbxrg_set
    __swig_getmethods__["gbxrg"] = _FreesteelPython.SurfXboxed_gbxrg_get
    if _newclass:gbxrg = _swig_property(_FreesteelPython.SurfXboxed_gbxrg_get, _FreesteelPython.SurfXboxed_gbxrg_set)
    __swig_setmethods__["gbyrg"] = _FreesteelPython.SurfXboxed_gbyrg_set
    __swig_getmethods__["gbyrg"] = _FreesteelPython.SurfXboxed_gbyrg_get
    if _newclass:gbyrg = _swig_property(_FreesteelPython.SurfXboxed_gbyrg_get, _FreesteelPython.SurfXboxed_gbyrg_set)
    __swig_setmethods__["bGeoOutLeft"] = _FreesteelPython.SurfXboxed_bGeoOutLeft_set
    __swig_getmethods__["bGeoOutLeft"] = _FreesteelPython.SurfXboxed_bGeoOutLeft_get
    if _newclass:bGeoOutLeft = _swig_property(_FreesteelPython.SurfXboxed_bGeoOutLeft_get, _FreesteelPython.SurfXboxed_bGeoOutLeft_set)
    __swig_setmethods__["bGeoOutUp"] = _FreesteelPython.SurfXboxed_bGeoOutUp_set
    __swig_getmethods__["bGeoOutUp"] = _FreesteelPython.SurfXboxed_bGeoOutUp_get
    if _newclass:bGeoOutUp = _swig_property(_FreesteelPython.SurfXboxed_bGeoOutUp_get, _FreesteelPython.SurfXboxed_bGeoOutUp_set)
    __swig_setmethods__["bGeoOutRight"] = _FreesteelPython.SurfXboxed_bGeoOutRight_set
    __swig_getmethods__["bGeoOutRight"] = _FreesteelPython.SurfXboxed_bGeoOutRight_get
    if _newclass:bGeoOutRight = _swig_property(_FreesteelPython.SurfXboxed_bGeoOutRight_get, _FreesteelPython.SurfXboxed_bGeoOutRight_set)
    __swig_setmethods__["bGeoOutDown"] = _FreesteelPython.SurfXboxed_bGeoOutDown_set
    __swig_getmethods__["bGeoOutDown"] = _FreesteelPython.SurfXboxed_bGeoOutDown_get
    if _newclass:bGeoOutDown = _swig_property(_FreesteelPython.SurfXboxed_bGeoOutDown_get, _FreesteelPython.SurfXboxed_bGeoOutDown_set)
    __swig_setmethods__["xpart"] = _FreesteelPython.SurfXboxed_xpart_set
    __swig_getmethods__["xpart"] = _FreesteelPython.SurfXboxed_xpart_get
    if _newclass:xpart = _swig_property(_FreesteelPython.SurfXboxed_xpart_get, _FreesteelPython.SurfXboxed_xpart_set)
    __swig_setmethods__["yparts"] = _FreesteelPython.SurfXboxed_yparts_set
    __swig_getmethods__["yparts"] = _FreesteelPython.SurfXboxed_yparts_get
    if _newclass:yparts = _swig_property(_FreesteelPython.SurfXboxed_yparts_get, _FreesteelPython.SurfXboxed_yparts_set)
    __swig_setmethods__["buckets"] = _FreesteelPython.SurfXboxed_buckets_set
    __swig_getmethods__["buckets"] = _FreesteelPython.SurfXboxed_buckets_get
    if _newclass:buckets = _swig_property(_FreesteelPython.SurfXboxed_buckets_get, _FreesteelPython.SurfXboxed_buckets_set)
    __swig_setmethods__["idups"] = _FreesteelPython.SurfXboxed_idups_set
    __swig_getmethods__["idups"] = _FreesteelPython.SurfXboxed_idups_get
    if _newclass:idups = _swig_property(_FreesteelPython.SurfXboxed_idups_get, _FreesteelPython.SurfXboxed_idups_set)
    __swig_setmethods__["maxidup"] = _FreesteelPython.SurfXboxed_maxidup_set
    __swig_getmethods__["maxidup"] = _FreesteelPython.SurfXboxed_maxidup_get
    if _newclass:maxidup = _swig_property(_FreesteelPython.SurfXboxed_maxidup_get, _FreesteelPython.SurfXboxed_maxidup_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_SurfXboxed(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddPointBucket(*args): return _FreesteelPython.SurfXboxed_AddPointBucket(*args)
    def AddEdgeBucket(*args): return _FreesteelPython.SurfXboxed_AddEdgeBucket(*args)
    def AddTriangBucket(*args): return _FreesteelPython.SurfXboxed_AddTriangBucket(*args)
    def SortBuckets(*args): return _FreesteelPython.SurfXboxed_SortBuckets(*args)
    def BuildBoxes(*args): return _FreesteelPython.SurfXboxed_BuildBoxes(*args)
    __swig_setmethods__["searchbox_epsilon"] = _FreesteelPython.SurfXboxed_searchbox_epsilon_set
    __swig_getmethods__["searchbox_epsilon"] = _FreesteelPython.SurfXboxed_searchbox_epsilon_get
    if _newclass:searchbox_epsilon = _swig_property(_FreesteelPython.SurfXboxed_searchbox_epsilon_get, _FreesteelPython.SurfXboxed_searchbox_epsilon_set)
    def SliceFibreBox(*args): return _FreesteelPython.SurfXboxed_SliceFibreBox(*args)
    def SliceUFibre(*args): return _FreesteelPython.SurfXboxed_SliceUFibre(*args)
    def SliceVFibre(*args): return _FreesteelPython.SurfXboxed_SliceVFibre(*args)
    __swig_destroy__ = _FreesteelPython.delete_SurfXboxed
    __del__ = lambda self : None;
SurfXboxed_swigregister = _FreesteelPython.SurfXboxed_swigregister
SurfXboxed_swigregister(SurfXboxed)

class S2weaveB1iter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2weaveB1iter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2weaveB1iter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ftype"] = _FreesteelPython.S2weaveB1iter_ftype_set
    __swig_getmethods__["ftype"] = _FreesteelPython.S2weaveB1iter_ftype_get
    if _newclass:ftype = _swig_property(_FreesteelPython.S2weaveB1iter_ftype_get, _FreesteelPython.S2weaveB1iter_ftype_set)
    __swig_setmethods__["blower"] = _FreesteelPython.S2weaveB1iter_blower_set
    __swig_getmethods__["blower"] = _FreesteelPython.S2weaveB1iter_blower_get
    if _newclass:blower = _swig_property(_FreesteelPython.S2weaveB1iter_blower_get, _FreesteelPython.S2weaveB1iter_blower_set)
    __swig_setmethods__["w"] = _FreesteelPython.S2weaveB1iter_w_set
    __swig_getmethods__["w"] = _FreesteelPython.S2weaveB1iter_w_get
    if _newclass:w = _swig_property(_FreesteelPython.S2weaveB1iter_w_get, _FreesteelPython.S2weaveB1iter_w_set)
    __swig_setmethods__["wp"] = _FreesteelPython.S2weaveB1iter_wp_set
    __swig_getmethods__["wp"] = _FreesteelPython.S2weaveB1iter_wp_get
    if _newclass:wp = _swig_property(_FreesteelPython.S2weaveB1iter_wp_get, _FreesteelPython.S2weaveB1iter_wp_set)
    __swig_setmethods__["ixwp"] = _FreesteelPython.S2weaveB1iter_ixwp_set
    __swig_getmethods__["ixwp"] = _FreesteelPython.S2weaveB1iter_ixwp_get
    if _newclass:ixwp = _swig_property(_FreesteelPython.S2weaveB1iter_ixwp_get, _FreesteelPython.S2weaveB1iter_ixwp_set)
    def GetPoint(*args): return _FreesteelPython.S2weaveB1iter_GetPoint(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_S2weaveB1iter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_S2weaveB1iter
    __del__ = lambda self : None;
S2weaveB1iter_swigregister = _FreesteelPython.S2weaveB1iter_swigregister
S2weaveB1iter_swigregister(S2weaveB1iter)

class S2weave(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, S2weave, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, S2weave, name)
    __repr__ = _swig_repr
    __swig_setmethods__["urg"] = _FreesteelPython.S2weave_urg_set
    __swig_getmethods__["urg"] = _FreesteelPython.S2weave_urg_get
    if _newclass:urg = _swig_property(_FreesteelPython.S2weave_urg_get, _FreesteelPython.S2weave_urg_set)
    __swig_setmethods__["vrg"] = _FreesteelPython.S2weave_vrg_set
    __swig_getmethods__["vrg"] = _FreesteelPython.S2weave_vrg_get
    if _newclass:vrg = _swig_property(_FreesteelPython.S2weave_vrg_get, _FreesteelPython.S2weave_vrg_set)
    __swig_setmethods__["ufibs"] = _FreesteelPython.S2weave_ufibs_set
    __swig_getmethods__["ufibs"] = _FreesteelPython.S2weave_ufibs_get
    if _newclass:ufibs = _swig_property(_FreesteelPython.S2weave_ufibs_get, _FreesteelPython.S2weave_ufibs_set)
    __swig_setmethods__["vfibs"] = _FreesteelPython.S2weave_vfibs_set
    __swig_getmethods__["vfibs"] = _FreesteelPython.S2weave_vfibs_get
    if _newclass:vfibs = _swig_property(_FreesteelPython.S2weave_vfibs_get, _FreesteelPython.S2weave_vfibs_set)
    __swig_setmethods__["firstcontournumber"] = _FreesteelPython.S2weave_firstcontournumber_set
    __swig_getmethods__["firstcontournumber"] = _FreesteelPython.S2weave_firstcontournumber_get
    if _newclass:firstcontournumber = _swig_property(_FreesteelPython.S2weave_firstcontournumber_get, _FreesteelPython.S2weave_firstcontournumber_set)
    __swig_setmethods__["lastcontournumber"] = _FreesteelPython.S2weave_lastcontournumber_set
    __swig_getmethods__["lastcontournumber"] = _FreesteelPython.S2weave_lastcontournumber_get
    if _newclass:lastcontournumber = _swig_property(_FreesteelPython.S2weave_lastcontournumber_get, _FreesteelPython.S2weave_lastcontournumber_set)
    def SetShape(*args): return _FreesteelPython.S2weave_SetShape(*args)
    def Advance(*args): return _FreesteelPython.S2weave_Advance(*args)
    def ContourNumber(*args): return _FreesteelPython.S2weave_ContourNumber(*args)
    def TrackContour(*args): return _FreesteelPython.S2weave_TrackContour(*args)
    def SetAllCutCodes(*args): return _FreesteelPython.S2weave_SetAllCutCodes(*args)
    def Invert(*args): return _FreesteelPython.S2weave_Invert(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_S2weave(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_S2weave
    __del__ = lambda self : None;
S2weave_swigregister = _FreesteelPython.S2weave_swigregister
S2weave_swigregister(S2weave)

CircleIntersectNew = _FreesteelPython.CircleIntersectNew
HackAreaOffset = _FreesteelPython.HackAreaOffset
HackToolpath = _FreesteelPython.HackToolpath
class Area2_gen(S2weave):
    __swig_setmethods__ = {}
    for _s in [S2weave]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Area2_gen, name, value)
    __swig_getmethods__ = {}
    for _s in [S2weave]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Area2_gen, name)
    __repr__ = _swig_repr
    __swig_setmethods__["z"] = _FreesteelPython.Area2_gen_z_set
    __swig_getmethods__["z"] = _FreesteelPython.Area2_gen_z_get
    if _newclass:z = _swig_property(_FreesteelPython.Area2_gen_z_get, _FreesteelPython.Area2_gen_z_set)
    __swig_setmethods__["r"] = _FreesteelPython.Area2_gen_r_set
    __swig_getmethods__["r"] = _FreesteelPython.Area2_gen_r_get
    if _newclass:r = _swig_property(_FreesteelPython.Area2_gen_r_get, _FreesteelPython.Area2_gen_r_set)
    __swig_setmethods__["psxb"] = _FreesteelPython.Area2_gen_psxb_set
    __swig_getmethods__["psxb"] = _FreesteelPython.Area2_gen_psxb_get
    if _newclass:psxb = _swig_property(_FreesteelPython.Area2_gen_psxb_get, _FreesteelPython.Area2_gen_psxb_set)
    def SetSurfaceTop(*args): return _FreesteelPython.Area2_gen_SetSurfaceTop(*args)
    def HackDowntoZ(*args): return _FreesteelPython.Area2_gen_HackDowntoZ(*args)
    def FindInterior(*args): return _FreesteelPython.Area2_gen_FindInterior(*args)
    def MakeContours(*args): return _FreesteelPython.Area2_gen_MakeContours(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_Area2_gen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_Area2_gen
    __del__ = lambda self : None;
Area2_gen_swigregister = _FreesteelPython.Area2_gen_swigregister
Area2_gen_swigregister(Area2_gen)

class AnimatedPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimatedPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimatedPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ipathx"] = _FreesteelPython.AnimatedPos_ipathx_set
    __swig_getmethods__["ipathx"] = _FreesteelPython.AnimatedPos_ipathx_get
    if _newclass:ipathx = _swig_property(_FreesteelPython.AnimatedPos_ipathx_get, _FreesteelPython.AnimatedPos_ipathx_set)
    __swig_setmethods__["ptOnLink"] = _FreesteelPython.AnimatedPos_ptOnLink_set
    __swig_getmethods__["ptOnLink"] = _FreesteelPython.AnimatedPos_ptOnLink_get
    if _newclass:ptOnLink = _swig_property(_FreesteelPython.AnimatedPos_ptOnLink_get, _FreesteelPython.AnimatedPos_ptOnLink_set)
    __swig_setmethods__["ilink"] = _FreesteelPython.AnimatedPos_ilink_set
    __swig_getmethods__["ilink"] = _FreesteelPython.AnimatedPos_ilink_get
    if _newclass:ilink = _swig_property(_FreesteelPython.AnimatedPos_ilink_get, _FreesteelPython.AnimatedPos_ilink_set)
    __swig_setmethods__["isegOnLink"] = _FreesteelPython.AnimatedPos_isegOnLink_set
    __swig_getmethods__["isegOnLink"] = _FreesteelPython.AnimatedPos_isegOnLink_get
    if _newclass:isegOnLink = _swig_property(_FreesteelPython.AnimatedPos_isegOnLink_get, _FreesteelPython.AnimatedPos_isegOnLink_set)
    __swig_setmethods__["bOnPath"] = _FreesteelPython.AnimatedPos_bOnPath_set
    __swig_getmethods__["bOnPath"] = _FreesteelPython.AnimatedPos_bOnPath_get
    if _newclass:bOnPath = _swig_property(_FreesteelPython.AnimatedPos_bOnPath_get, _FreesteelPython.AnimatedPos_bOnPath_set)
    __swig_setmethods__["ptOnPath"] = _FreesteelPython.AnimatedPos_ptOnPath_set
    __swig_getmethods__["ptOnPath"] = _FreesteelPython.AnimatedPos_ptOnPath_get
    if _newclass:ptOnPath = _swig_property(_FreesteelPython.AnimatedPos_ptOnPath_get, _FreesteelPython.AnimatedPos_ptOnPath_set)
    __swig_setmethods__["isegOnPath"] = _FreesteelPython.AnimatedPos_isegOnPath_set
    __swig_getmethods__["isegOnPath"] = _FreesteelPython.AnimatedPos_isegOnPath_get
    if _newclass:isegOnPath = _swig_property(_FreesteelPython.AnimatedPos_isegOnPath_get, _FreesteelPython.AnimatedPos_isegOnPath_set)
    def __init__(self, *args): 
        this = _FreesteelPython.new_AnimatedPos(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_AnimatedPos
    __del__ = lambda self : None;
AnimatedPos_swigregister = _FreesteelPython.AnimatedPos_swigregister
AnimatedPos_swigregister(AnimatedPos)

class fsvtkToolpathMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fsvtkToolpathMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fsvtkToolpathMapper, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["New"] = lambda x: _FreesteelPython.fsvtkToolpathMapper_New
    if _newclass:New = staticmethod(_FreesteelPython.fsvtkToolpathMapper_New)
    __swig_setmethods__["pftpaths"] = _FreesteelPython.fsvtkToolpathMapper_pftpaths_set
    __swig_getmethods__["pftpaths"] = _FreesteelPython.fsvtkToolpathMapper_pftpaths_get
    if _newclass:pftpaths = _swig_property(_FreesteelPython.fsvtkToolpathMapper_pftpaths_get, _FreesteelPython.fsvtkToolpathMapper_pftpaths_set)
    __swig_setmethods__["ptoolshape"] = _FreesteelPython.fsvtkToolpathMapper_ptoolshape_set
    __swig_getmethods__["ptoolshape"] = _FreesteelPython.fsvtkToolpathMapper_ptoolshape_get
    if _newclass:ptoolshape = _swig_property(_FreesteelPython.fsvtkToolpathMapper_ptoolshape_get, _FreesteelPython.fsvtkToolpathMapper_ptoolshape_set)
    __swig_setmethods__["bound"] = _FreesteelPython.fsvtkToolpathMapper_bound_set
    __swig_getmethods__["bound"] = _FreesteelPython.fsvtkToolpathMapper_bound_get
    if _newclass:bound = _swig_property(_FreesteelPython.fsvtkToolpathMapper_bound_get, _FreesteelPython.fsvtkToolpathMapper_bound_set)
    __swig_setmethods__["xrg"] = _FreesteelPython.fsvtkToolpathMapper_xrg_set
    __swig_getmethods__["xrg"] = _FreesteelPython.fsvtkToolpathMapper_xrg_get
    if _newclass:xrg = _swig_property(_FreesteelPython.fsvtkToolpathMapper_xrg_get, _FreesteelPython.fsvtkToolpathMapper_xrg_set)
    __swig_setmethods__["yrg"] = _FreesteelPython.fsvtkToolpathMapper_yrg_set
    __swig_getmethods__["yrg"] = _FreesteelPython.fsvtkToolpathMapper_yrg_get
    if _newclass:yrg = _swig_property(_FreesteelPython.fsvtkToolpathMapper_yrg_get, _FreesteelPython.fsvtkToolpathMapper_yrg_set)
    __swig_setmethods__["stockweave"] = _FreesteelPython.fsvtkToolpathMapper_stockweave_set
    __swig_getmethods__["stockweave"] = _FreesteelPython.fsvtkToolpathMapper_stockweave_get
    if _newclass:stockweave = _swig_property(_FreesteelPython.fsvtkToolpathMapper_stockweave_get, _FreesteelPython.fsvtkToolpathMapper_stockweave_set)
    __swig_setmethods__["pos"] = _FreesteelPython.fsvtkToolpathMapper_pos_set
    __swig_getmethods__["pos"] = _FreesteelPython.fsvtkToolpathMapper_pos_get
    if _newclass:pos = _swig_property(_FreesteelPython.fsvtkToolpathMapper_pos_get, _FreesteelPython.fsvtkToolpathMapper_pos_set)
    __swig_setmethods__["poslast"] = _FreesteelPython.fsvtkToolpathMapper_poslast_set
    __swig_getmethods__["poslast"] = _FreesteelPython.fsvtkToolpathMapper_poslast_get
    if _newclass:poslast = _swig_property(_FreesteelPython.fsvtkToolpathMapper_poslast_get, _FreesteelPython.fsvtkToolpathMapper_poslast_set)
    __swig_setmethods__["bAnimated"] = _FreesteelPython.fsvtkToolpathMapper_bAnimated_set
    __swig_getmethods__["bAnimated"] = _FreesteelPython.fsvtkToolpathMapper_bAnimated_get
    if _newclass:bAnimated = _swig_property(_FreesteelPython.fsvtkToolpathMapper_bAnimated_get, _FreesteelPython.fsvtkToolpathMapper_bAnimated_set)
    __swig_setmethods__["bForward"] = _FreesteelPython.fsvtkToolpathMapper_bForward_set
    __swig_getmethods__["bForward"] = _FreesteelPython.fsvtkToolpathMapper_bForward_get
    if _newclass:bForward = _swig_property(_FreesteelPython.fsvtkToolpathMapper_bForward_get, _FreesteelPython.fsvtkToolpathMapper_bForward_set)
    __swig_setmethods__["bDrawStock"] = _FreesteelPython.fsvtkToolpathMapper_bDrawStock_set
    __swig_getmethods__["bDrawStock"] = _FreesteelPython.fsvtkToolpathMapper_bDrawStock_get
    if _newclass:bDrawStock = _swig_property(_FreesteelPython.fsvtkToolpathMapper_bDrawStock_get, _FreesteelPython.fsvtkToolpathMapper_bDrawStock_set)
    def Draw(*args): return _FreesteelPython.fsvtkToolpathMapper_Draw(*args)
    def DrawStock(*args): return _FreesteelPython.fsvtkToolpathMapper_DrawStock(*args)
    def DrawFibre(*args): return _FreesteelPython.fsvtkToolpathMapper_DrawFibre(*args)
    def CalculateStock(*args): return _FreesteelPython.fsvtkToolpathMapper_CalculateStock(*args)
fsvtkToolpathMapper_swigregister = _FreesteelPython.fsvtkToolpathMapper_swigregister
fsvtkToolpathMapper_swigregister(fsvtkToolpathMapper)
fsvtkToolpathMapper_New = _FreesteelPython.fsvtkToolpathMapper_New

MakeCorerough = _FreesteelPython.MakeCorerough
class VtkPolyDataSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VtkPolyDataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VtkPolyDataSource, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _FreesteelPython.delete_VtkPolyDataSource
    __del__ = lambda self : None;
    def GetDataSource(*args): return _FreesteelPython.VtkPolyDataSource_GetDataSource(*args)
    def __init__(self, *args): 
        this = _FreesteelPython.new_VtkPolyDataSource(*args)
        try: self.this.append(this)
        except: self.this = this
VtkPolyDataSource_swigregister = _FreesteelPython.VtkPolyDataSource_swigregister
VtkPolyDataSource_swigregister(VtkPolyDataSource)

class VtkCone(VtkPolyDataSource):
    __swig_setmethods__ = {}
    for _s in [VtkPolyDataSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VtkCone, name, value)
    __swig_getmethods__ = {}
    for _s in [VtkPolyDataSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VtkCone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _FreesteelPython.new_VtkCone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_VtkCone
    __del__ = lambda self : None;
VtkCone_swigregister = _FreesteelPython.VtkCone_swigregister
VtkCone_swigregister(VtkCone)

class VtkSphere(VtkPolyDataSource):
    __swig_setmethods__ = {}
    for _s in [VtkPolyDataSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VtkSphere, name, value)
    __swig_getmethods__ = {}
    for _s in [VtkPolyDataSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VtkSphere, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _FreesteelPython.new_VtkSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_VtkSphere
    __del__ = lambda self : None;
VtkSphere_swigregister = _FreesteelPython.VtkSphere_swigregister
VtkSphere_swigregister(VtkSphere)

class VtkWindow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VtkWindow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VtkWindow, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getRenderWindow(*args): return _FreesteelPython.VtkWindow_getRenderWindow(*args)
    def getRenderer(*args): return _FreesteelPython.VtkWindow_getRenderer(*args)
    def getRenderWindowInteractor(*args): return _FreesteelPython.VtkWindow_getRenderWindowInteractor(*args)
    def render(*args): return _FreesteelPython.VtkWindow_render(*args)
    def start(*args): return _FreesteelPython.VtkWindow_start(*args)
    def setSize(*args): return _FreesteelPython.VtkWindow_setSize(*args)
VtkWindow_swigregister = _FreesteelPython.VtkWindow_swigregister
VtkWindow_swigregister(VtkWindow)

class PolydataWindow(VtkWindow):
    __swig_setmethods__ = {}
    for _s in [VtkWindow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolydataWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [VtkWindow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolydataWindow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _FreesteelPython.new_PolydataWindow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_PolydataWindow
    __del__ = lambda self : None;
    def display(*args): return _FreesteelPython.PolydataWindow_display(*args)
PolydataWindow_swigregister = _FreesteelPython.PolydataWindow_swigregister
PolydataWindow_swigregister(PolydataWindow)

class FreesteelWindow(VtkWindow):
    __swig_setmethods__ = {}
    for _s in [VtkWindow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FreesteelWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [VtkWindow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FreesteelWindow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _FreesteelPython.new_FreesteelWindow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_FreesteelWindow
    __del__ = lambda self : None;
    def add(*args): return _FreesteelPython.FreesteelWindow_add(*args)
    def showAll(*args): return _FreesteelPython.FreesteelWindow_showAll(*args)
    def LoadSTL(*args): return _FreesteelPython.FreesteelWindow_LoadSTL(*args)
    def addPathxSeries(*args): return _FreesteelPython.FreesteelWindow_addPathxSeries(*args)
    def PushTrianglesIntoSurface(*args): return _FreesteelPython.FreesteelWindow_PushTrianglesIntoSurface(*args)
    def setAnimated(*args): return _FreesteelPython.FreesteelWindow_setAnimated(*args)
    def setProgress(*args): return _FreesteelPython.FreesteelWindow_setProgress(*args)
FreesteelWindow_swigregister = _FreesteelPython.FreesteelWindow_swigregister
FreesteelWindow_swigregister(FreesteelWindow)

class FreesteelWindow2(VtkWindow):
    __swig_setmethods__ = {}
    for _s in [VtkWindow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FreesteelWindow2, name, value)
    __swig_getmethods__ = {}
    for _s in [VtkWindow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FreesteelWindow2, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _FreesteelPython.new_FreesteelWindow2(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _FreesteelPython.delete_FreesteelWindow2
    __del__ = lambda self : None;
    def clear(*args): return _FreesteelPython.FreesteelWindow2_clear(*args)
    def setSurface(*args): return _FreesteelPython.FreesteelWindow2_setSurface(*args)
    def setBoundary(*args): return _FreesteelPython.FreesteelWindow2_setBoundary(*args)
    def setTool(*args): return _FreesteelPython.FreesteelWindow2_setTool(*args)
    def addToolpath(*args): return _FreesteelPython.FreesteelWindow2_addToolpath(*args)
    def showAll(*args): return _FreesteelPython.FreesteelWindow2_showAll(*args)
FreesteelWindow2_swigregister = _FreesteelPython.FreesteelWindow2_swigregister
FreesteelWindow2_swigregister(FreesteelWindow2)



